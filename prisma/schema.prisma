generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Definição dos tipos enum
enum Gender {
  MALE
  FEMALE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum PaymentState {
  PENDING
  COMPLETED
  FAILED
}

enum EnrollementState {
  PENDING
  APPROVED
  REJECTED
}

enum FileFormat {
  PDF
  DOCX
  JPEG
  PNG
}

enum FileType {
  IDENTITY_CARD
  REPORT_CARD
  TUITION_RECEIPT
}

enum StudentType {
  SCHOLARSHIP
  REGULAR
}

enum LevelName {
  CLASS_10
  CLASS_11
  CLASS_12
  CLASS_13
}

enum MonthName {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}

// Níveis dos estudantes
model Level {
  id         Int       @id @unique @default(autoincrement())
  name       LevelName
  created_at DateTime
  update_at  DateTime
  students   Student[]

  @@map("levels")
}

// Províncias
model Province {
  id         Int       @id @unique @default(autoincrement())
  name       String
  created_at DateTime
  update_at  DateTime
  students   Student[]

  @@map("provinces")
}

// Detalhes de pagamento do item
model ItemPaymentDetail {
  id         Int      @id @unique @default(autoincrement())
  type       Int
  quantity   Int
  price      Float
  payment    Payment? @relation(fields: [paymentsId], references: [id])
  created_at DateTime
  update_at  DateTime
  paymentsId Int?

  @@map("items_payment_details")
}

// Pagamentos
model Payment {
  id                   Int                 @id @unique @default(autoincrement())
  student_id           Int
  state                PaymentState
  amount_paid          Float
  date                 DateTime
  created_at           DateTime
  update_at            DateTime
  students             Student             @relation(fields: [student_id], references: [id])
  receipts             Receipt[]
  item_payment_details ItemPaymentDetail[]

  @@map("payments")
}

// Meses
model MonthPaid {
  id            Int       @id @unique @default(autoincrement())
  name          MonthName
  price         Float
  trafic_ticket String
  tuitions      Tuition?  @relation(fields: [tuitionId], references: [id])
  tuitionId     Int?

  @@map("month_paids")
}

// Turmas
model Classe {
  id           Int       @id @unique @default(autoincrement())
  name         String
  course       String
  id_classroom Int
  period       String
  created_at   DateTime
  update_at    DateTime
  students     Student[]
  classrooms   Classroom @relation(fields: [id_classroom], references: [id])

  @@map("classes")
}

// Estudantes
model Student {
  id                 Int           @id @unique @default(autoincrement())
  type               StudentType
  password           String        @default("123456")
  fullName           String
  father             String
  mother             String
  dateOfBirth        DateTime
  height             Float
  identityCardNumber String        @unique
  gender             Gender
  emissionDate       DateTime
  expirationDate     DateTime
  maritalStatus      MaritalStatus
  residence          String
  phone              Int           @unique
  email              String        @unique
  alternativePhone   Int?          @unique
  provinces          Province?     @relation(fields: [provinceId], references: [id])
  counties           County?       @relation(fields: [countyId], references: [id])
  levels             Level?        @relation(fields: [levelId], references: [id])
  courses            Course?       @relation(fields: [courseId], references: [id])
  classes            Classe?       @relation(fields: [classeId], references: [id])
  tuitionFees        Tuition[]
  payments           Payment[]
  files              File[]
  enrollments        Enrollment[]
  countyId           Int?
  provinceId         Int?
  levelId            Int?
  courseId           Int?
  classeId           Int?

  @@map("students")
}

// Documentos
model Document {
  id           Int         @id @unique @default(autoincrement())
  enrollments  Enrollment? @relation(fields: [enrollmentId], references: [id])
  files        File?       @relation(fields: [fileId], references: [id])
  enrollmentId Int?
  fileId       Int?

  @@map("documents")
}

// Recibos
model Receipt {
  id         Int      @id @unique @default(autoincrement())
  tuition_id Int
  path       String
  payment_id DateTime
  created_at DateTime
  update_at  DateTime
  tuitions   Tuition  @relation(fields: [tuition_id], references: [id])
  payments   Payment? @relation(fields: [paymentsId], references: [id])
  paymentsId Int?

  @@map("receipts")
}

// Cursos
model Course {
  id         Int       @id @unique @default(autoincrement())
  name       String
  created_at DateTime
  update_at  DateTime
  students   Student[]

  @@map("courses")
}

// propinas
model Tuition {
  id          Int         @id @unique @default(autoincrement())
  student_id  Int
  state       String
  pay_data    DateTime
  quantity    Int
  amount_paid Float
  students    Student     @relation(fields: [student_id], references: [id])
  months      MonthPaid[]
  receipts    Receipt[]

  @@map("tuition")
}

// municipios
model County {
  id         Int       @id @unique @default(autoincrement())
  name       String
  created_at DateTime
  update_at  DateTime
  students   Student[]

  @@map("counties")
}

// Salas de aula
model Classroom {
  id         Int      @id @unique @default(autoincrement())
  name       String
  created_at DateTime
  update_at  DateTime
  classes    Classe[]

  @@map("classrooms")
}

// Matrículas
model Enrollment {
  id         Int              @id @unique @default(autoincrement())
  created_at DateTime
  update_at  DateTime
  state      EnrollementState
  students   Student?         @relation(fields: [studentsId], references: [id])
  documents  Document[]
  studentsId Int?

  @@map("enrollments")
}

// Arquivos
model File {
  id         Int        @id @unique @default(autoincrement())
  name       String
  path       String
  format     FileFormat
  type       FileType
  created_at DateTime
  update_at  DateTime
  students   Student    @relation(fields: [studentId], references: [id])
  documents  Document[]
  studentId  Int

  @@map("files")
}
