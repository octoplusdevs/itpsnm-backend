generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Level {
  id         Int          @id @unique @default(autoincrement())
  name       LevelName
  created_at DateTime     @default(now())
  update_at  DateTime     @updatedAt
  Enrollment Enrollment[]
  ItemPrices ItemPrices[]
  Classe     Classe[]

  @@map("levels")
}

model Province {
  id         Int       @id @unique @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  update_at  DateTime  @updatedAt
  students   Student[]

  @@map("provinces")
}

model Note {
  id           Int            @id @unique @default(autoincrement())
  nee          Float
  level        LevelName
  created_at   DateTime
  update_at    DateTime
  subjectId    Int
  enrollmentId Int
  mf           Float?
  mfd          Float?
  mt1          Float?
  mt2          Float?
  mt3          Float?
  resource     Float
  pf1          Float
  pf2          Float
  pft          Float
  ps1          Float
  ps2          Float
  pst          Float
  pt1          Float
  pt2          Float
  ptt          Float
  approved     APPROVED_STATE @default(FAILED)
  ims          Float?
  enrollments  Enrollment     @relation(fields: [enrollmentId], references: [id])
  subjects     Subject        @relation(fields: [subjectId], references: [id])

  @@map("notes")
}

model Subject {
  id         Int      @id @unique @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  Note       Note[]

  @@map("subjects")
}

model MonthPaid {
  id            Int       @id @unique @default(autoincrement())
  name          MonthName
  price         Float
  trafic_ticket String
  tuitionId     Int?
  tuitions      Tuition?  @relation(fields: [tuitionId], references: [id])

  @@map("month_paids")
}

model Classe {
  id           Int          @id @unique @default(autoincrement())
  id_classroom Int?
  created_at   DateTime     @default(now())
  update_at    DateTime     @updatedAt
  courseId     Int?
  course_id    Int?
  level        Level        @relation(fields: [levelId], references: [id])
  name         ClasseType
  period       PeriodType
  course       Course?      @relation(fields: [courseId], references: [id])
  classrooms   Classroom?   @relation(fields: [id_classroom], references: [id])
  Enrollment   Enrollment[]
  levelId      Int

  @@map("classes")
}

model ItemPrices {
  id            Int      @id @default(autoincrement())
  itemName      String
  basePrice     Decimal
  ivaPercentage Int?
  priceWithIva  Decimal?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  levelId       Int?
  level         Level?   @relation(fields: [levelId], references: [id])

  @@unique([levelId, itemName])
  @@map("item_prices")
}

model Student {
  id                 Int           @id @unique @default(autoincrement())
  type               StudentType
  fullName           String
  father             String
  mother             String
  dateOfBirth        DateTime
  height             Float
  identityCardNumber String        @unique
  gender             Gender
  emissionDate       DateTime
  expirationDate     DateTime
  maritalStatus      MaritalStatus
  residence          String
  phone              String        @unique
  alternativePhone   String?
  provinceId         Int?
  created_at         DateTime      @default(now())
  update_at          DateTime      @updatedAt
  county             String?
  enrollments        Enrollment?
  files              File[]
  provinces          Province?     @relation(fields: [provinceId], references: [id])
  tuitionFees        Tuition[]
  User               User?

  @@map("students")
}

model Document {
  id           Int         @id @unique @default(autoincrement())
  enrollmentId Int?
  created_at   DateTime    @default(now())
  update_at    DateTime    @updatedAt
  enrollments  Enrollment? @relation(fields: [enrollmentId], references: [id])
  File         File[]

  @@map("documents")
}

model Receipt {
  id         Int      @id @unique @default(autoincrement())
  tuition_id Int
  path       String
  payment_id Int
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  payments   Payment  @relation(fields: [payment_id], references: [id])
  tuitions   Tuition  @relation(fields: [tuition_id], references: [id])

  @@map("receipts")
}

model Course {
  id         Int          @id @unique @default(autoincrement())
  name       String       @unique
  created_at DateTime     @default(now())
  update_at  DateTime     @updatedAt
  Classe     Classe[]
  Enrollment Enrollment[]

  @@map("courses")
}

model Tuition {
  id          Int         @id @unique @default(autoincrement())
  student_id  Int
  state       String
  pay_data    DateTime
  quantity    Int
  amount_paid Float
  months      MonthPaid[]
  receipts    Receipt[]
  students    Student     @relation(fields: [student_id], references: [id])

  @@map("tuition")
}

// SALA
model Classroom {
  id               Int      @id @unique @default(autoincrement())
  name             String
  created_at       DateTime @default(now())
  update_at        DateTime @updatedAt
  capacity         Int      @default(40)
  currentOccupancy Int
  classes          Classe[]

  @@map("classrooms")
}

model Enrollment {
  id                 Int              @id @unique @default(autoincrement())
  docsState          EnrollementState
  paymentState       EnrollementState
  identityCardNumber String?          @unique
  levelId            Int?
  courseId           Int?
  classeId           Int?
  created_at         DateTime         @default(now())
  update_at          DateTime         @updatedAt
  documents          Document[]
  classes            Classe?          @relation(fields: [classeId], references: [id])
  courses            Course?          @relation(fields: [courseId], references: [id])
  students           Student?         @relation(fields: [identityCardNumber], references: [identityCardNumber])
  levels             Level?           @relation(fields: [levelId], references: [id])
  Invoice            Invoice[]
  Note               Note[]
  Payment            Payment[]
  StudentBalance     StudentBalance?
  Transaction        Transaction[]
  User               User?

  @@map("enrollments")
}

model File {
  id                 Int        @id @unique @default(autoincrement())
  name               String
  path               String
  format             FileFormat
  type               FileType
  created_at         DateTime   @default(now())
  update_at          DateTime   @updatedAt
  documentId         Int?
  identityCardNumber String?
  document           Document?  @relation(fields: [documentId], references: [id])
  students           Student?   @relation(fields: [identityCardNumber], references: [identityCardNumber])

  @@map("files")
}

model Employee {
  id                 Int           @id @default(autoincrement())
  fullName           String
  dateOfBirth        DateTime
  identityCardNumber String        @unique
  gender             Gender
  emissionDate       DateTime
  expirationDate     DateTime
  maritalStatus      MaritalStatus
  residence          String
  phone              String        @unique
  alternativePhone   String?
  created_at         DateTime      @default(now())
  update_at          DateTime      @updatedAt
  Invoice            Invoice[]
  Payment            Payment[]
  Transaction        Transaction[]
  User               User?

  @@map("employees")
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  password     String
  loginAttempt Int
  isBlocked    Boolean
  role         Role
  isActive     Boolean
  lastLogin    DateTime    @updatedAt
  created_at   DateTime    @default(now())
  update_at    DateTime    @updatedAt
  employeeId   Int?        @unique
  studentId    Int?        @unique
  enrollmentId Int?        @unique
  accessLogs   AccessLog[]
  employee     Employee?   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  enrollment   Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  student      Student?    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("users")
}

model AccessLog {
  id        Int          @id @default(autoincrement())
  userId    Int
  timestamp DateTime     @default(now())
  status    AccessStatus
  user      User         @relation(fields: [userId], references: [id])

  @@map("accesslogs")
}

model Invoice {
  id           Int           @id @default(autoincrement())
  totalAmount  Decimal       @db.Decimal(10, 2)
  dueDate      DateTime
  issueDate    DateTime      @default(now())
  enrollmentId Int
  created_at   DateTime      @default(now())
  update_at    DateTime      @updatedAt
  status       PAY_STATUS    @default(PENDING)
  employeeId   Int?
  type         InvoiceType?
  items        InvoiceItem[]
  employee     Employee?     @relation(fields: [employeeId], references: [id])
  Enrollment   Enrollment    @relation(fields: [enrollmentId], references: [id])
  Payment      Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id           Int        @id @default(autoincrement())
  description  String
  amount       Decimal    @db.Decimal(10, 2)
  invoiceId    Int
  created_at   DateTime   @default(now())
  update_at    DateTime   @updatedAt
  QTY          Int?       @default(1)
  month        MonthName?
  status       PAY_STATUS
  total_amount Decimal    @db.Decimal(10, 2)
  invoice      Invoice    @relation(fields: [invoiceId], references: [id])

  @@map("invoice_items")
}

model Transaction {
  id                Int        @id @default(autoincrement())
  paymentId         Int?
  transactionNumber String     @unique
  amount            Decimal    @db.Decimal(10, 2)
  enrollmentId      Int
  date              DateTime   @default(now())
  employeeId        Int?
  used              Boolean    @default(false)
  employee          Employee?  @relation(fields: [employeeId], references: [id])
  Enrollment        Enrollment @relation(fields: [enrollmentId], references: [id])
  payment           Payment?   @relation("PaymentToTransaction", fields: [paymentId], references: [id])

  @@map("transactions")
}

model Payment {
  id             Int              @id @default(autoincrement())
  created_at     DateTime         @default(now())
  update_at      DateTime         @updatedAt
  employeeId     Int?
  enrollmentId   Int?
  invoiceId      Int
  totalAmount    Decimal          @db.Decimal(10, 2)
  status         PAY_STATUS       @default(PENDING)
  transactionId  Int?             @unique
  PaymentDetails PaymentDetails[]
  employee       Employee?        @relation(fields: [employeeId], references: [id])
  Enrollment     Enrollment?      @relation(fields: [enrollmentId], references: [id])
  invoice        Invoice          @relation(fields: [invoiceId], references: [id])
  Receipt        Receipt[]
  transactions   Transaction[]    @relation("PaymentToTransaction")

  @@map("payments")
}

model PaymentItem {
  id             Int              @id @default(autoincrement())
  description    String           @db.VarChar(100)
  price          Decimal          @db.Decimal(10, 2)
  type           String           @db.VarChar(50)
  created_at     DateTime         @default(now())
  update_at      DateTime         @updatedAt
  PaymentDetails PaymentDetails[]

  @@map("paymentitems")
}

model PaymentDetails {
  id            Int         @id @default(autoincrement())
  paymentId     Int
  paymentItemId Int
  amount        Decimal     @db.Decimal(10, 2)
  created_at    DateTime    @default(now())
  update_at     DateTime    @updatedAt
  payment       Payment     @relation(fields: [paymentId], references: [id])
  paymentItem   PaymentItem @relation(fields: [paymentItemId], references: [id])

  @@map("paymentdetails")
}

model StudentBalance {
  id           Int         @id @default(autoincrement())
  balance      Decimal     @default(0) @db.Decimal(10, 2)
  enrollmentId Int?        @unique
  created_at   DateTime    @default(now())
  update_at    DateTime    @updatedAt
  Enrollment   Enrollment? @relation(fields: [enrollmentId], references: [id])

  @@map("studentbalance")
}

enum Gender {
  MALE
  FEMALE
}

enum APPROVED_STATE {
  APPROVED
  FAILED
  WITH_DEFICIENCY
}

enum Role {
  STUDENT
  EMPLOYEE
  ADMIN
  TEACHER
}

enum AccessStatus {
  SUCCESS
  FAILURE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum PaymentState {
  PENDING
  PAID
}

enum PAY_STATUS {
  PENDING
  PAID
  RECUSED
}

enum EnrollementState {
  PENDING
  APPROVED
  REJECTED
}

enum FileFormat {
  PDF
  DOCX
  JPEG
  PNG
}

enum FileType {
  IDENTITY_CARD
  REPORT_CARD
  TUITION_RECEIPT
  PHOTO
}

enum MonthName {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}

enum StudentType {
  SCHOLARSHIP
  REGULAR
}

enum LevelName {
  CLASS_10
  CLASS_11
  CLASS_12
  CLASS_13
}

enum InvoiceType {
  DECLARATION             @map("Declaração")
  CERTIFICATE             @map("Certificado")
  PASS                    @map("Passe")
  UNIFORM                 @map("Uniforme")
  TUITION                 @map("Propinas")
  TUITION_PENALTY         @map("Multa de Propinas")
  ENROLLMENT              @map("Matrícula")
  ENROLLMENT_CONFIRMATION @map("Confirmação de Matrícula")
}

enum PaymentType {
  A
  B
  C
  D
}

enum PAYMENT_METHOD {
  A
  B
  C
}

enum Mester {
  FIRST
  SECOND
  THIRD
}

enum PeriodType {
  MORNING
  AFTERNOON
  EVENING
}

enum ClasseType {
  A
  B
  C
  D
}
